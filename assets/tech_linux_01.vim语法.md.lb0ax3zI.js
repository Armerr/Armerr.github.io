import{_ as p,c as a,o as e,R as t}from"./chunks/framework.AzhzAUt1.js";const u=JSON.parse('{"title":"vim语法","description":"","frontmatter":{"title":"vim语法","date":"2023-03-12T17:08:12.000Z","permalink":"/pages/7f0d00/","categories":["技术","Linux"],"tags":[null]},"headers":[],"relativePath":"tech/linux/01.vim语法.md","filePath":"tech/linux/01.vim语法.md","lastUpdated":1704104554000}'),l={name:"tech/linux/01.vim语法.md"},r=t('<h2 id="启动-vim" tabindex="-1">启动 vim <a class="header-anchor" href="#启动-vim" aria-label="Permalink to &quot;启动 vim&quot;">​</a></h2><p>在命令行窗口中输入以下命令即可</p><p>vim 直接启动 vim</p><p>vim filename 打开 vim 并创建名为 filename 的文件</p><h2 id="文件命令" tabindex="-1">文件命令 <a class="header-anchor" href="#文件命令" aria-label="Permalink to &quot;文件命令&quot;">​</a></h2><p>打开单个文件</p><p>vim file</p><p>同时打开多个文件</p><p>vim file1 file2 file3 ...</p><p>在 vim 窗口中打开一个新文件</p><p>:open file</p><p>在新窗口中打开文件</p><p>:split file</p><p>切换到下一个文件</p><p>:bn</p><p>切换到上一个文件</p><p>:bp</p><p>查看当前打开的文件列表，当前正在编辑的文件会用 [] 括起来。</p><p>:args</p><p>打开远程文件，比如 ftp 或者 share folder</p><p>:e <a href="ftp://192.168.10.76/abc.txt" target="_blank" rel="noreferrer">ftp://192.168.10.76/abc.txt</a></p><p>:e \\qadrive est.txt</p><h2 id="vim-的模式" tabindex="-1">vim 的模式 <a class="header-anchor" href="#vim-的模式" aria-label="Permalink to &quot;vim 的模式&quot;">​</a></h2><p>正常模式（按 Esc 或 Ctrl+[进入） 左下角显示文件名或为空</p><p>插入模式（按 i 键进入） 左下角显示 --INSERT--</p><p>可视模式（不知道如何进入） 左下角显示 --VISUAL--</p><p>导航命令 % 括号匹配</p><p>插入命令 i 在当前位置生前插入</p><p>I 在当前行首插入</p><p>a 在当前位置后插入</p><p>A 在当前行尾插入</p><p>o 在当前行之后插入一行</p><p>O 在当前行之前插入一行</p><h2 id="查找命令" tabindex="-1">查找命令 <a class="header-anchor" href="#查找命令" aria-label="Permalink to &quot;查找命令&quot;">​</a></h2><p>/text　　查找 text，按 n 健查找下一个，按 N 健查找前一个。</p><p>?text　　查找 text，反向查找，按 n 健查找下一个，按 N 健查找前一个。</p><p>vim 中有一些特殊字符在查找时需要转义　　.*[]^%/?~$</p><p>:set ignorecase　　忽略大小写的查找</p><p>:set noignorecase　　不忽略大小写的查找</p><p>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按 * 或 #键即可以该单词进行搜索，相当于 / 搜索。而 #命令相当于? 搜索。</p><p>:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</p><p>:set nohlsearch　　关闭高亮搜索显示</p><p>:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下 n 或 N 键，则会再次高亮。</p><p>:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</p><p>:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p><h2 id="替换命令" tabindex="-1">替换命令 <a class="header-anchor" href="#替换命令" aria-label="Permalink to &quot;替换命令&quot;">​</a></h2><p>ra 将当前字符替换为 a，当期字符即光标所在字符。</p><p>s/old/new/ 用 old 替换 new，替换当前行的第一个匹配</p><p>s/old/new/g 用 old 替换 new，替换当前行的所有匹配</p><p>%s/old/new/ 用 old 替换 new，替换所有行的第一个匹配</p><p>%s/old/new/g 用 old 替换 new，替换整个文件的所有匹配</p><p>:10,20 s/^/ /g 在第 10 行知第 20 行每行前面加四个空格，用于缩进。</p><p>ddp 交换光标所在行和其下紧邻的一行。</p><h2 id="移动命令" tabindex="-1">移动命令 <a class="header-anchor" href="#移动命令" aria-label="Permalink to &quot;移动命令&quot;">​</a></h2><p>h 左移一个字符</p><p>l 右移一个字符，这个命令很少用，一般用 w 代替。</p><p>k 上移一个字符</p><p>j 下移一个字符</p><p>以上四个命令可以配合数字使用，比如 20j 就是向下移动 20 行，5h 就是向左移动 5 个字符，在 Vim 中，很多命令都可以配合数字使用，比如删除 10 个字符 10x，在当前位置后插入 3 个！，3a！，这里的 Esc 是必须的，否则命令不生效。</p><p>w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替 l 命令。</p><p>b 向后移动一个单词 2b 向后移动 2 个单词</p><p>e，同 w，只不过是光标停在单词尾部</p><p>ge，同 b，光标停在单词尾部。</p><p>^ 移动到本行第一个非空白字符上。</p><p>0（数字 0）移动到本行第一个字符上，</p><p>移动到本行第一个字符。同 0 健。</p><p>$ 移动到行尾 3$ 移动到下面 3 行的行尾</p><p>gg 移动到文件头。= [[</p><p>G（shift + g） 移动到文件尾。= ]]</p><p>f（find）命令也可以用于移动，fx 将找到光标后第一个为 x 的字符，3fd 将找到第三个为 d 的字符。</p><p>F 同 f，反向查找。</p><p>跳到指定行，冒号 + 行号，回车，比如跳到 240 行就是 :240 回车。另一个方法是行号 + G，比如 230G 跳到 230 行。</p><p>Ctrl + e 向下滚动一行</p><p>Ctrl + y 向上滚动一行</p><p>Ctrl + d 向下滚动半屏</p><p>Ctrl + u 向上滚动半屏</p><p>Ctrl + f 向下滚动一屏</p><p>Ctrl + b 向上滚动一屏</p><h2 id="撤销和重做" tabindex="-1">撤销和重做 <a class="header-anchor" href="#撤销和重做" aria-label="Permalink to &quot;撤销和重做&quot;">​</a></h2><p>u 撤销（Undo）</p><p>U 撤销对整行的操作</p><p>Ctrl + r 重做（Redo），即撤销的撤销。</p><h2 id="删除命令" tabindex="-1">删除命令 <a class="header-anchor" href="#删除命令" aria-label="Permalink to &quot;删除命令&quot;">​</a></h2><p>x 删除当前字符</p><p>3x 删除当前光标开始向后三个字符</p><p>X 删除当前字符的前一个字符。X=dh</p><p>dl 删除当前字符， dl=x</p><p>dh 删除前一个字符</p><p>dd 删除当前行</p><p>dj 删除上一行</p><p>dk 删除下一行</p><p>10d 删除当前行开始的 10 行。</p><p>D 删除当前字符至行尾。D=d$</p><p>d$ 删除当前字符之后的所有字符（本行）</p><p>kdgg 删除当前行之前所有行（不包括当前行）</p><p>jdG（jd shift + g） 删除当前行之后所有行（不包括当前行）</p><p>:1,10d 删除 1-10 行</p><p>:11,$d 删除 11 行及以后所有的行</p><p>:1,$d 删除所有行</p><p>J(shift + j)　　删除两行之间的空行，实际上是合并两行。</p><h2 id="拷贝和粘贴" tabindex="-1">拷贝和粘贴 <a class="header-anchor" href="#拷贝和粘贴" aria-label="Permalink to &quot;拷贝和粘贴&quot;">​</a></h2><p>yy 拷贝当前行</p><p>nyy 拷贝当前后开始的 n 行，比如 2yy 拷贝当前行及其下一行。</p><p>p 在当前光标后粘贴, 如果之前使用了 yy 命令来复制一行，那么就在当前行的下一行粘贴。</p><p>shift+p 在当前行前粘贴</p><p>:1,10 co 20 将 1-10 行插入到第 20 行之后。</p><p>:1,$ co $ 将整个文件复制一份并添加到文件尾部。</p><p>正常模式下按 v（逐字）或 V（逐行）进入可视模式，然后用 jklh 命令移动即可选择某些行或字符，再按 y 即可复制</p><p>ddp 交换当前行和其下一行</p><p>xp 交换当前字符和其后一个字符</p><h2 id="剪切命令" tabindex="-1">剪切命令 <a class="header-anchor" href="#剪切命令" aria-label="Permalink to &quot;剪切命令&quot;">​</a></h2><p>正常模式下按 v（逐字）或 V（逐行）进入可视模式，然后用 jklh 命令移动即可选择某些行或字符，再按 d 即可剪切</p><p>ndd 剪切当前行之后的 n 行。利用 p 命令可以对剪切的内容进行粘贴</p><p>:1,10d 将 1-10 行剪切。利用 p 命令可将剪切后的内容进行粘贴。</p><p>:1, 10 m 20 将第 1-10 行移动到第 20 行之后。</p><h2 id="退出命令" tabindex="-1">退出命令 <a class="header-anchor" href="#退出命令" aria-label="Permalink to &quot;退出命令&quot;">​</a></h2><p>:wq 保存并退出</p><p>ZZ 保存并退出</p><p>:q! 强制退出并忽略所有更改</p><p>:e! 放弃所有修改，并打开原来文件。</p><h2 id="窗口命令" tabindex="-1">窗口命令 <a class="header-anchor" href="#窗口命令" aria-label="Permalink to &quot;窗口命令&quot;">​</a></h2><p>:split 或 new 打开一个新窗口，光标停在顶层的窗口上</p><p>:split file 或: new file 用新窗口打开文件</p><p>split 打开的窗口都是横向的，使用 vsplit 可以纵向打开窗口。</p><p>Ctrl+ww 移动到下一个窗口</p><p>Ctrl+wj 移动到下方的窗口</p><p>Ctrl+wk 移动到上方的窗口</p><h2 id="关闭窗口" tabindex="-1">关闭窗口 <a class="header-anchor" href="#关闭窗口" aria-label="Permalink to &quot;关闭窗口&quot;">​</a></h2><p>:close 最后一个窗口不能使用此命令，可以防止意外退出 vim。</p><p>:q 如果是最后一个被关闭的窗口，那么将退出 vim。</p><p>ZZ 保存并退出。</p><p>关闭所有窗口，只保留当前窗口</p><p>:only</p><h2 id="录制宏" tabindex="-1">录制宏 <a class="header-anchor" href="#录制宏" aria-label="Permalink to &quot;录制宏&quot;">​</a></h2><p>按 q 键加任意字母开始录制，再按 q 键结束录制（这意味着 vim 中的宏不可嵌套），使用的时候 @加宏名，比如 qa。。。q 录制名为 a 的宏，@a 使用这个宏。</p><p>执行 shell 命令 :!command</p><p>:!ls 列出当前目录下文件</p><p>:!perl -c script.pl 检查 perl 脚本语法，可以不用退出 vim，非常方便。</p><p>:!perl script.pl 执行 perl 脚本，可以不用退出 vim，非常方便。</p><p>:suspend 或 Ctrl - Z 挂起 vim，回到 shell，按 fg 可以返回 vim。</p><h2 id="注释命令" tabindex="-1">注释命令 <a class="header-anchor" href="#注释命令" aria-label="Permalink to &quot;注释命令&quot;">​</a></h2><p>perl 程序中 #开始的行为注释，所以要注释某些行，只需在行首加入#</p><p>3,5 s/^/#/g 注释第 3-5 行</p><p>3,5 s/^#//g 解除 3-5 行的注释</p><p>1,$ s/^/#/g 注释整个文档。</p><p>:%s/^/#/g 注释整个文档，此法更快。</p><h2 id="帮助命令" tabindex="-1">帮助命令 <a class="header-anchor" href="#帮助命令" aria-label="Permalink to &quot;帮助命令&quot;">​</a></h2><p>:help or F1 显示整个帮助</p><p>:help xxx 显示 xxx 的帮助，比如 :help i, :help CTRL-[（即 Ctrl+[的帮助）。</p><p>:help &#39;number&#39; Vim 选项的帮助用单引号括起</p><p>:help 特殊键的帮助用 &lt;&gt; 扩起</p><p>:help -t Vim 启动参数的帮助用</p><p>:help i 插入模式下 Esc 的帮助，某个模式下的帮助用模式主题的模式</p><p>帮助文件中位于 || 之间的内容是超链接，可以用 Ctrl+] 进入链接，Ctrl+o（Ctrl + t）返回</p><h2 id="其他非编辑命令" tabindex="-1">其他非编辑命令 <a class="header-anchor" href="#其他非编辑命令" aria-label="Permalink to &quot;其他非编辑命令&quot;">​</a></h2><p>. 重复前一次命令</p><p>:set ruler?　　查看是否设置了 ruler，在. vimrc 中，使用 set 命令设制的选项都可以通过这个命令查看</p><p>:scriptnames　　查看 vim 脚本文件的位置，比如. vimrc 文件，语法文件及 plugin 等。</p><p>:set list 显示非打印字符，如 tab，空格，行尾等。如果 tab 无法显示，请确定用 set lcs=tab:&gt;- 命令设置了. vimrc 文件，并确保你的文件中的确有 tab，如果开启了 expendtab，那么 tab 将被扩展为空格。</p>',159),i=[r];function h(o,n,d,s,c,m){return e(),a("div",null,i)}const b=p(l,[["render",h]]);export{u as __pageData,b as default};
